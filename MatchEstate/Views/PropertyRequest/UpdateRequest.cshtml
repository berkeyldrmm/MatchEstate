@using Shared.Dtos.PropertyRequest
@model UpdateRequestDto

<link href="~/lib/selectize/css/selectize.min.css" rel="stylesheet" />
<link href="~/lib/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />
<style>
    .wrapper {
        display: inline-flex;
        background: #fff;
        align-items: center;
        justify-content: space-evenly;
        border-radius: 5px;
        padding-top: 15px;
    }

    .wrapper .option {
        background: #fff;
        display: flex;
        align-items: center;
        justify-content: space-evenly;
        margin-right: 20px;
        border-radius: 5px;
        cursor: pointer;
        padding: 0 12px;
        border: 2px solid lightgrey;
        transition: all 0.3s ease;
    }

    .wrapper .option .dot {
        height: 20px;
        width: 20px;
        background: #d9d9d9;
        border-radius: 50%;
        position: relative;
    }

    .wrapper .option .dot::before {
        position: absolute;
        content: "";
        top: 4px;
        left: 4px;
        width: 12px;
        height: 12px;
        background: #0069d9;
        border-radius: 50%;
        opacity: 0;
        transform: scale(1.5);
        transition: all 0.3s ease;
    }

    input[type="radio"] {
        display: none;
    }

    #newClient:checked:checked ~ .newClient,
    #savedClient:checked:checked ~ .savedClient{
        border-color: #0077b6;
        background: #0077b6;
    }

    #newClient:checked:checked ~ .newClient .dot,
    #savedClient:checked:checked ~ .savedClient .dot{
        background: #fff;
    }

    #newClient:checked:checked ~ .newClient .dot::before,
    #savedClient:checked:checked ~ .savedClient .dot::before{
        opacity: 1;
        transform: scale(1);
    }

    .wrapper .option span {
        font-size: 20px;
        color: #808080;
    }

    #newClient:checked:checked ~ .newClient span,
    #savedClient:checked:checked ~ .savedClient span{
        color: #fff;
    }

    .selectize-input.items.not-full.has-options::after {
        display: none;
    }

    .flex-wrap input {
        width: 20px;
        height: 20px;
    }

    .flex-wrap div {
        margin-right: 20px;
        font-size: 20px;
    }
</style>

<form class="mt-4 mb-4 mx-4">
    <h1>Update Request</h1>
    <input type="hidden" asp-for="RequestId" />
    <div class="form-group">
        <div class="wrapper">
            <input type="radio" asp-for="RadioForClient" name="radioForClient" value="1" id="newClient" checked>
            <input type="radio" asp-for="RadioForClient" name="radioForClient" value="0" id="savedClient">
            <label for="newClient" class="option newClient">
                <span>New Client</span>
            </label>
            <label for="savedClient" class="option savedClient">
                <span>Saved Client</span>
            </label>
        </div>

        <div id="savedClientDiv" style="display:none;">
            <br />
            <div class="form-group">
                <label for="select-client">Select Client</label>
                <select asp-for="ClientId" id="select-client" placeholder="Select Client">
                    @await Component.InvokeAsync("GetClientsComponent", new { clientId = Model.ClientId })
                </select>
                <small class="text-warning">Warning: There may be some client with same name. Phone number can be distinctive in this regard.</small>
            </div>
        </div>

        <div id="newClientDiv">
            <div class="form-group">
                <br />
                <label>Client name surname</label>
                <input asp-for="ClientNameSurname" name="ClientNameSurname" type="text" class="form-control" placeholder="Name Surname">
            </div>
            <div class="form-group">
                <br />
                <label>Client email</label>
                <input asp-for="ClientEmail" name="ClientEmail" type="email" class="form-control" aria-describedby="emailHelp" placeholder="Email address">
            </div>
            <div class="form-group">
                <br />
                <label>Client phone number</label>
                <input asp-for="ClientPhoneNumber" name="ClientPhoneNumber" type="tel" class="form-control" placeholder="Phone number" pattern="[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}">
            </div>
        </div>
    </div>
    <hr />
    <div class="d-grid">
        <div class="row w-100">
            <div class="form-group w-25">
                <label>Property Title</label>
                <input asp-for="RequestTitle" name="RequestTitle" type="text" class="form-control" placeholder="Title">
            </div>
            <div class="form-group w-25">
                <label>Property Type</label>
                <select asp-for="PropertyTypeId" name="PropertyType" class="form-control" id="propertyTypeInput" data-property="[1,2,3,4,5]" disabled
                        data-bs-toggle="tooltip"
                        title="Warning: Property type cannot be updated. If you selected a wrong property type, please create a new listing and delete this one.">
                    <option value=2>Land</option>
                    <option value=4>Farmland</option>
                    <option value=1>Shop</option>
                    <option value=5>Apartment</option>
                    <option value=3>Commercial unit</option>
                </select>
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="form-group">
                <label>City</label>
                <select asp-for="City" name="City" class="form-control" id="selectCity" data-property="[1,2,3,4,5]">
                </select>
            </div>

            <div class="form-group" id="select-district">
                <label>District</label>
                <select id="selectTown" data-property="[1,2,3,4,5]" class="form-select selectpicker" multiple data-live-search="true" title="Select districts" style="background-color: #ffffff">
                </select>
            </div>

           @*  <div class="form-group d-flex flex-wrap" id="selectTown">
            </div> *@
        </div>
    </div>
    <hr />

    <div class="form-group">
        <label>Minimum Price</label>
        <div class="input-group w-25">
            <input asp-for="MinPrice" name="MinPrice" type="number" class="form-control w-25" id="minPrice" />
            <span class="input-group-text"><i class="fa fa-dollar"></i></span>
        </div>
    </div>
    <div class="form-group">
        <label>Maximum Price</label>
        <div class="input-group w-25">
            <input asp-for="MaxPrice" name="MaxPrice" type="number" class="form-control w-25" id="maxPrice" />
            <span class="input-group-text"><i class="fa fa-dollar"></i></span>
        </div>
    </div>

    @await Component.InvokeAsync("GetPropertyStatusesComponent", new { view = "Default", bgColor = "#0077b6", propertyStatusId = Model.PropertyStatusId })

    <div class="form-group">
        <label>Other details</label>
        <textarea asp-for="Details" name="Details" id="detail" class="form-control" placeholder="Details..."></textarea>
    </div>
    <div class="form-group">
        <input type="submit" id="updateRequest" class="form-control btn w-25" style="background-color:#0077b6;color:#ffffff;" value="Save request" />
    </div>
    <div id="statusDiv" style="display:none;margin-top:10px;"></div>

</form>

<script>
    $("#navRequest").addClass("active");

    var turkiye = {};

    $(document).ready(function () {
        fetch("/js/countries.json")
        .then(res => res.json())
        .then(datas => {
            turkiye = datas;
            let cities = turkiye.map(data => data.name);
            let options = "";
            cities.forEach(city => {
                options += `<option value='${city}' ${(city.replace("İ","i").trim().toLowerCase() == @Json.Serialize(Model.City.Trim().ToLower())) ? 'selected' : ''}>${city}</option>`
            })
            $("#selectCity").html(options);
        })
        .then(()=>{
            getDistricts();
        })
        .then(()=>{
            setDistricts();
        })

        $("#selectCity").change(() => {
            getDistricts()
        });

        $("#updateRequest").on("click",(e)=>{
            e.preventDefault();

            $.post("/propertyrequest/updaterequest?requestId=@Html.Raw(ViewBag.requestId)", {
                requestId: $("input[name='RequestId']").val(),
                requestTitle: $("input[name='RequestTitle']").val(),
                radioForClient: $("input[name='radioForClient']:checked").val(),
                clientId: $("#select-client").val(),
                clientNameSurname: $("input[name='ClientNameSurname']").val(),
                clientPhoneNumber: $("input[name='ClientPhoneNumber']").val(),
                clientEmail: $("input[name='ClientEmail']").val(),
                propertyStatusId: $("input[name='PropertyStatusId']:checked").val(),
                city: $("#selectCity").val(),
                district: $("#selectTown").val(),
                minPrice: $("#minPrice").val(),
                maxPrice: $("#maxPrice").val(),
                details: $("textarea#detail").val()
            })
            .done((data, status) => {
                if (data.success) {
                    window.location.href = "/propertyrequest";
                }
                else {
                    sendNotification("error", data.message);
                }
            }).fail((xhr, status, error)=>{
                sendNotification("error", `An error occured ${status} - ${error}`);
            })

        });

        checkRadioForClient()

        $("input[name='radioForClient']").change(() => {
            checkRadioForClient()
        });

        $('#select-client').selectize({
            sortField: 'text'
        });
    });

    function checkRadioForClient(){
        if ($('#newClient').is(':checked')){
            $("#newClientDiv").fadeIn();
            $("#savedClientDiv").fadeOut();
        }
        else{
            $("#newClientDiv").fadeOut();
            $("#savedClientDiv").fadeIn();
        }
    }

    function getDistricts(){
        let cityname = $("#selectCity").val();
        let cityObject = turkiye.filter(city => city.name == cityname)[0];
        let towns = cityObject.towns;
        let townNames = towns.map(town => town.name);
        let options = "";
        townNames.forEach(townName => options += `<option value="${townName}">${townName}</option>`);
        $("#selectTown").html(options);
        $('.selectpicker').selectpicker('refresh');
    }
    
    function setDistricts(){
        var districts = @Html.Raw(Json.Serialize(Model.District));
        $('.selectpicker').selectpicker('val', districts);
    }
</script>
<script src="~/lib/selectize/js/selectize.min.js"></script>
<script src="~/lib/bootstrap-select/js/bootstrap-select.min.js"></script>
<script src="~/lib/popper.js/umd/popper.min.js"></script>